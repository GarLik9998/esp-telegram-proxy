import os, json, requests, joblib, numpy as np
from flask import Flask, request, jsonify
from datetime import datetime

app = Flask(__name__)
TOKEN = os.environ.get("TELEGRAM_API_KEY")
URL = f"https://api.telegram.org/bot{TOKEN}"
TEMP_FILE = "target_temp.txt"
current_temperature = 24

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if os.path.exists(TEMP_FILE):
    try:
        with open(TEMP_FILE) as f:
            current_temperature = int(float(f.read().strip()))
    except: pass

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_keyboard = {
    "keyboard": [
        [{"text": "üì° –°—Ç–∞—Ç—É—Å –¥–æ–º–∞"}, {"text": "üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"}],
        [{"text": "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"}, {"text": "üîå –í–∫–ª/–í—ã–∫–ª —Å–∏—Å—Ç–µ–º—É"}],
        [{"text": "ü§ñ –ü—Ä–æ–≥–Ω–æ–∑ –ò–ò"}]
    ],
    "resize_keyboard": True
}
def get_temp_buttons(temp):
    return [
        [{"text": "‚ûñ", "callback_data": "temp-"}, {"text": "‚ûï", "callback_data": "temp+"}],
        [{"text": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "callback_data": "temp_save"}]
    ]

# Telegram API
def send_message(cid, text, kb=None):
    payload = {"chat_id": cid, "text": text}
    if kb: payload["reply_markup"] = json.dumps(kb)
    requests.post(f"{URL}/sendMessage", json=payload)

def send_edit(cid, mid, text):  # –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    requests.post(f"{URL}/editMessageText", json={"chat_id": cid, "message_id": mid, "text": text})

def send_edit_keyboard(cid, mid, text, btns):
    requests.post(f"{URL}/editMessageText", json={
        "chat_id": cid, "message_id": mid, "text": text,
        "reply_markup": {"inline_keyboard": btns}
    })

# –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç –º–æ–¥–µ–ª–∏
def forecast_ai():
    try:
        model = joblib.load("forecast_model.pkl")
        res = requests.get("https://api.openweathermap.org/data/2.5/weather?lat=41.2995&lon=69.2401&appid=4c5eb1d04065dfbf4d0f4cf2aad6623f&units=metric").json()
        hum, cloud = res["main"]["humidity"], res["clouds"]["all"]
        pred = model.predict(np.array([[hum, cloud]]))[0]
        return f"ü§ñ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑:\nüå° {round(pred,1)}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {hum}%\n‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud}%"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}"

# Webhook
@app.route('/webhook', methods=['POST'])
def webhook():
    global current_temperature
    try:
        d = request.get_json()
        if "message" in d:
            cid = d["message"]["chat"]["id"]
            txt = d["message"].get("text", "")
        
            if txt.startswith("/start"):
                send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç üè°", reply_keyboard)
        
            elif txt == "üì° –°—Ç–∞—Ç—É—Å –¥–æ–º–∞":
                send_message(cid, get_status(), reply_keyboard)
        
            elif txt == "üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É":
                send_inline_keyboard(cid, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{current_temperature}¬∞C]", get_temp_buttons(current_temperature))
        
            elif txt == "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã":
                send_message(cid, get_weather_forecast(), reply_keyboard)
        
            elif txt == "üîå –í–∫–ª/–í—ã–∫–ª —Å–∏—Å—Ç–µ–º—É":
                system_enabled = not system_enabled
                status = "–≤–∫–ª—é—á–µ–Ω–∞" if system_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                send_message(cid, f"–°–∏—Å—Ç–µ–º–∞ {status}", reply_keyboard)
        
            elif txt == "ü§ñ –ü—Ä–æ–≥–Ω–æ–∑ –ò–ò":
                send_message(cid, forecast_ai(), reply_keyboard)
        
            else:
                send_message(cid, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.", reply_keyboard)


        elif "callback_query" in d:
            cid = d["callback_query"]["message"]["chat"]["id"]
            mid = d["callback_query"]["message"]["message_id"]
            val = d["callback_query"]["data"]

            if val == "temp+":
                current_temperature = min(36, current_temperature + 1)
                send_edit_keyboard(cid, mid, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{current_temperature}¬∞C]", get_temp_buttons(current_temperature))

            elif val == "temp-":
                current_temperature = max(16, current_temperature - 1)
                send_edit_keyboard(cid, mid, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{current_temperature}¬∞C]", get_temp_buttons(current_temperature))

            elif val == "temp_save":
                try:
                    with open(TEMP_FILE, "w") as f: f.write(str(current_temperature))
                    send_edit(cid, mid, f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {current_temperature}¬∞C")
                except Exception as e:
                    send_edit(cid, mid, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

        return jsonify(ok=True)
    except Exception as e:
        print("‚ùå Webhook error:", e)
        return jsonify({"error": str(e)}), 500

# –î–ª—è ESP
@app.route('/get_temp')
def get_temp():
    try:
        with open(TEMP_FILE) as f:
            return jsonify({"target": float(f.read().strip())})
    except:
        return jsonify({"target": 24})

@app.route('/')
def home(): return "‚úÖ Telegram-–±—ç–∫—ç–Ω–¥ –∑–∞–ø—É—â–µ–Ω"

if __name__ == '__main__':
    app.run("0.0.0.0", 5000)
