import os
import json
import requests
import joblib
import numpy as np
from flask import Flask, request, jsonify
from datetime import datetime

app = Flask(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã ---
TOKEN = os.environ.get("TELEGRAM_API_KEY")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")
URL = f"https://api.telegram.org/bot{TOKEN}"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
system_enabled = True
current_temperature = 24
forecast_days = 1

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ ---
TEMP_FILE = "target_temp.txt"
if os.path.exists(TEMP_FILE):
    with open(TEMP_FILE, "r") as f:
        try:
            current_temperature = int(float(f.read().strip()))
        except:
            pass

# --- Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = {
    "keyboard": [
        [{"text": "üì° –°—Ç–∞—Ç—É—Å –¥–æ–º–∞"}, {"text": "üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"}],
        [{"text": "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"}, {"text": "üîå –í–∫–ª/–í—ã–∫–ª —Å–∏—Å—Ç–µ–º—É"}],
        [{"text": "ü§ñ –ü—Ä–æ–≥–Ω–æ–∑ –ò–ò"}]
    ],
    "resize_keyboard": True
}

# --- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_temp_buttons(temp):
    return [
        [{"text": "‚ûñ", "callback_data": "temp-"}, {"text": "‚ûï", "callback_data": "temp+"}],
        [{"text": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "callback_data": "temp_save"}]
    ]

# --- Telegram —Å–æ–æ–±—â–µ–Ω–∏—è ---
def send_message(chat_id, text, reply_markup=None):
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    requests.post(f"{URL}/sendMessage", json=payload)

def send_inline_keyboard(chat_id, text, buttons):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": {"inline_keyboard": buttons}
    }
    requests.post(f"{URL}/sendMessage", json=payload)

def send_edit(chat_id, message_id, new_text):
    requests.post(f"{URL}/editMessageText", json={
        "chat_id": chat_id,
        "message_id": message_id,
        "text": new_text
    })

def send_edit_keyboard(chat_id, message_id, new_text, buttons):
    requests.post(f"{URL}/editMessageText", json={
        "chat_id": chat_id,
        "message_id": message_id,
        "text": new_text,
        "reply_markup": {"inline_keyboard": buttons}
    })

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å ThingSpeak ---
def get_status():
    try:
        url = "https://api.thingspeak.com/channels/2730833/feeds/last.json?api_key=28M9FBLCYTFZ2535"
        res = requests.get(url).json()
        temp = res.get("field1", "–Ω/–¥")
        hum = res.get("field2", "–Ω/–¥")
        gas = res.get("field5", "–Ω/–¥")
        return f"üè† –°—Ç–∞—Ç—É—Å –¥–æ–º–∞:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {hum}%\nüî• –ì–∞–∑: {gas}%"
    except:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å ThingSpeak"

# --- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å API ---
def get_weather_forecast():
    try:
        API_KEY = "4c5eb1d04065dfbf4d0f4cf2aad6623f"
        LAT = 41.2995
        LON = 69.2401

        current_url = f"https://api.openweathermap.org/data/2.5/weather?lat={LAT}&lon={LON}&appid={API_KEY}&units=metric&lang=ru"
        current = requests.get(current_url).json()
        temp_now = current["main"]["temp"]
        feels_like = current["main"]["feels_like"]
        humidity = current["main"]["humidity"]
        clouds_desc = current["weather"][0]["description"]

        now_block = (
            f"üìç –¢–∞—à–∫–µ–Ω—Ç, —Å–µ–π—á–∞—Å: {round(temp_now)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(feels_like)}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% | ‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds_desc}"
        )

        forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?lat={LAT}&lon={LON}&appid={API_KEY}&units=metric&lang=ru"
        res = requests.get(forecast_url).json()

        today = datetime.utcnow().date()
        tomorrow = today.replace(day=today.day + 1)

        today_points = ["09:00", "12:00", "15:00", "18:00", "21:00"]
        tomorrow_points = ["12:00", "15:00", "18:00"]

        forecast_today = []
        forecast_tomorrow = []

        for f in res["list"]:
            dt_txt = f["dt_txt"]
            date_part, time_part = dt_txt.split(" ")
            temp = round(f["main"]["temp"])
            time_short = time_part[:5]

            if date_part == str(today) and time_short in today_points:
                forecast_today.append(f"üïí {time_short} ‚Äî {temp}¬∞C")
            elif date_part == str(tomorrow) and time_short in tomorrow_points:
                forecast_tomorrow.append(f"üïí {time_short} ‚Äî {temp}¬∞C")

        day_block = "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(forecast_today)
        tomorrow_block = "üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n" + "\n".join(forecast_tomorrow)

        return f"{now_block}\n\n{day_block}\n\n{tomorrow_block}"

    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}"

# --- –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑ ---
def forecast_ai():
    try:
        model = joblib.load("forecast_model.pkl")
        API_KEY = "4c5eb1d04065dfbf4d0f4cf2aad6623f"
        LAT, LON = 41.2995, 69.2401
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={LAT}&lon={LON}&appid={API_KEY}&units=metric"
        res = requests.get(url).json()
        humidity = res["main"]["humidity"]
        clouds = res["clouds"]["all"]
        temp_pred = model.predict(np.array([[humidity, clouds]]))[0]
        return f"ü§ñ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp_pred, 1)}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}"

# --- Telegram webhook ---
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    global current_temperature, forecast_days, system_enabled
    data = request.get_json()

    if "message" in data:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"].get("text", "")

        if text.startswith("/start"):
            send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º üè°", reply_keyboard)
        elif text == "üì° –°—Ç–∞—Ç—É—Å –¥–æ–º–∞":
            send_message(chat_id, get_status(), reply_keyboard)
        elif text == "üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É":
            send_inline_keyboard(chat_id, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{current_temperature}¬∞C]", get_temp_buttons(current_temperature))
        elif text == "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã":
            send_message(chat_id, get_weather_forecast(), reply_keyboard)
        elif text == "ü§ñ –ü—Ä–æ–≥–Ω–æ–∑ –ò–ò":
            send_message(chat_id, forecast_ai(), reply_keyboard)
        elif text == "üîå –í–∫–ª/–í—ã–∫–ª —Å–∏—Å—Ç–µ–º—É":
            system_enabled = not system_enabled
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if system_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            send_message(chat_id, f"–°–∏—Å—Ç–µ–º–∞ {status}", reply_keyboard)

    elif "callback_query" in data:
        query = data["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        message_id = query["message"]["message_id"]
        data_val = query["data"]

        if data_val == "temp+":
            current_temperature = min(36, current_temperature + 1)
        elif data_val == "temp-":
            current_temperature = max(16, current_temperature - 1)
        elif data_val == "temp_save":
            with open(TEMP_FILE, "w") as f:
                f.write(str(current_temperature))
            send_edit(chat_id, message_id, f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {current_temperature}¬∞C")
            return jsonify(ok=True)

        send_edit_keyboard(chat_id, message_id, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{current_temperature}¬∞C]", get_temp_buttons(current_temperature))

    return jsonify(ok=True)

# --- –û—Ç–¥–∞—á–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è ESP ---
@app.route('/get_temp', methods=['GET'])
def get_temp():
    try:
        with open(TEMP_FILE, "r") as f:
            t = float(f.read().strip())
            return jsonify({"target": t})
    except:
        return jsonify({"target": 24})

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
@app.route('/')
def index():
    return "–ë–æ—Ç —É–º–Ω–æ–≥–æ –¥–æ–º–∞ –∑–∞–ø—É—â–µ–Ω ‚úÖ"

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000)
