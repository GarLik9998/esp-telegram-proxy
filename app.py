from flask import Flask, request, jsonify
import os
import json
import requests
import time
import joblib
import numpy as np

app = Flask(__name__)

# --- Telegram API ---
TOKEN = os.environ.get("TELEGRAM_API_KEY")
URL = f"https://api.telegram.org/bot{TOKEN}"
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

reply_keyboard = {
    "keyboard": [
        [{"text": "üì° –°—Ç–∞—Ç—É—Å –¥–æ–º–∞"}, {"text": "üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"}],
        [{"text": "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"}, {"text": "üîå –í–∫–ª/–í—ã–∫–ª —Å–∏—Å—Ç–µ–º—É"}],
        [{"text": "ü§ñ –ü—Ä–æ–≥–Ω–æ–∑ –ò–ò"}]
    ],
    "resize_keyboard": True
}

def send_telegram(text):
    if TOKEN and CHAT_ID:
        requests.post(f"{URL}/sendMessage", json={"chat_id": CHAT_ID, "text": text, "reply_markup": json.dumps(reply_keyboard)})

# --- –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ---
def get_temp_buttons(temp):
    return {
        "inline_keyboard": [
            [{"text": "‚ûñ", "callback_data": "temp-"}, {"text": "‚ûï", "callback_data": "temp+"}],
            [{"text": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "callback_data": "temp_save"}]
        ]
    }

# --- –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
def get_forecast_buttons():
    return {
        "inline_keyboard": [[
            {"text": "‚óÄÔ∏è", "callback_data": "forecast-"},
            {"text": "‚ñ∂Ô∏è", "callback_data": "forecast+"}
        ]]
    }

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ---
system_state = {
    "valve_position": "closed",
    "enabled": True,
    "desired_temperature": 24,
    "current_temperature": None,
    "gas_level": None,
    "errors": [],
    "forecast_day": 0
}

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–ª–∞—Ç—ã ESP: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω–∏—è ---
@app.route("/get_temp")
def get_temp():
    return jsonify({
        "target": system_state["desired_temperature"],
        "enabled": system_state["enabled"]
    })

# --- –§—É–Ω–∫—Ü–∏–∏ ---
@app.route("/update", methods=["POST"])
def update():
    data = request.json
    system_state["current_temperature"] = data.get("temperature")
    system_state["gas_level"] = data.get("gas")
    return "OK"

@app.route("/enable", methods=["POST"])
def enable():
    system_state["enabled"] = True
    system_state["valve_position"] = "closed"
    send_telegram("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞. –ö–ª–∞–ø–∞–Ω –∑–∞–∫—Ä—ã—Ç.")
    return "System enabled"

@app.route("/disable", methods=["POST"])
def disable():
    system_state["enabled"] = False
    system_state["valve_position"] = "closed"
    send_telegram("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ö–ª–∞–ø–∞–Ω –∑–∞–∫—Ä—ã—Ç. –ì–∞–∑ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è.")
    return "System disabled"

@app.route("/control_valve", methods=["POST"])
def control_valve():
    if not system_state["enabled"]:
        return "System is disabled"
    current = system_state.get("current_temperature")
    desired = system_state.get("desired_temperature")
    if current is None:
        return "No temperature data"
    if current < desired:
        system_state["valve_position"] = "open"
    elif current > desired:
        system_state["valve_position"] = "closed"
    else:
        system_state["valve_position"] = "half"
    return f"Valve set to {system_state['valve_position']}"

@app.route("/error", methods=["POST"])
def report_error():
    data = request.json
    error_type = data.get("type")
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    system_state["errors"].append({"type": error_type, "time": timestamp})

    if error_type == "temperature_sensor_fail":
        system_state["valve_position"] = "half"
        send_telegram("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. –ö–ª–∞–ø–∞–Ω –ø–æ–ª—É–æ—Ç–∫—Ä—ã—Ç.")
    elif error_type == "gas_sensor_fail":
        system_state["valve_position"] = "closed"
        system_state["enabled"] = False
        send_telegram("üö® –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫ –≥–∞–∑–∞. –ö–ª–∞–ø–∞–Ω –∑–∞–∫—Ä—ã—Ç, —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    elif error_type == "motor_fail":
        send_telegram("‚ö†Ô∏è –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞ –∫–ª–∞–ø–∞–Ω–∞.")
    elif error_type == "overheat":
        system_state["valve_position"] = "closed"
        system_state["enabled"] = False
        send_telegram("üî• –ü–µ—Ä–µ–≥—Ä–µ–≤. –ö–ª–∞–ø–∞–Ω –∑–∞–∫—Ä—ã—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è.")
    elif error_type == "voltage_spike":
        system_state["valve_position"] = "closed"
        system_state["enabled"] = False
        send_telegram("‚ö° –°–∫–∞—á–∫–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è. –ö–ª–∞–ø–∞–Ω –∑–∞–∫—Ä—ã—Ç, —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –ø–∞—É–∑–µ.")
    return "Error processed"

def get_forecast_text(day):
    try:
        from datetime import datetime

        API_KEY = "4c5eb1d04065dfbf4d0f4cf2aad6623f"
        lat, lon = 41.2995, 69.2401

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
        current = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=ru"
        ).json()
        now_temp = current["main"]["temp"]
        now_hum = current["main"]["humidity"]
        now_desc = current["weather"][0]["description"]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π
        forecast = requests.get(
            f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&cnt=40&lang=ru"
        ).json()

        # –°–¥–≤–∏–≥–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
        start = day * 8
        all_items = forecast["list"][start:start + 8]

        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ 09:00, 12:00, 15:00, 18:00
        wanted_times = ['09:00:00', '12:00:00', '15:00:00', '18:00:00']
        filtered = [item for item in all_items if item['dt_txt'].split(' ')[1] in wanted_times]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (datetime.time)
        items = sorted(filtered, key=lambda x: datetime.strptime(x['dt_txt'], "%Y-%m-%d %H:%M:%S").time())

        if not items:
            return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        date_str = items[0]['dt_txt'].split(' ')[0]
        lines = [f"üìÖ –î–∞—Ç–∞: {date_str}"]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "—Å–µ–π—á–∞—Å"
        lines.append(f"üïí—Å–µ–π—á–∞—Å | üå° {now_temp}¬∞C |üíß {now_hum}% | ‚òÅÔ∏è {now_desc}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º
        for item in items:
            time_part = item['dt_txt'].split(' ')[1]
            temp = item['main']['temp']
            hum = item['main']['humidity']
            desc = item['weather'][0]['description']
            lines.append(f"üïí{time_part} | üå° {temp}¬∞C |üíß {hum}% | ‚òÅÔ∏è {desc}")

        return '\n'.join(lines)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}"

# --- Webhook ---
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    chat_id = data["message"]["chat"]["id"] if "message" in data else data["callback_query"]["message"]["chat"]["id"]
    if "message" in data:
        text = data["message"].get("text", "")
        if text == "üì° –°—Ç–∞—Ç—É—Å –¥–æ–º–∞":
            try:
                res = requests.get("https://api.thingspeak.com/channels/2730833/feeds/last.json?api_key=28M9FBLCYTFZ2535").json()
                msg = f"üè† –°—Ç–∞—Ç—É—Å –¥–æ–º–∞:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {res.get('field1')}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {res.get('field2')}%\nüî• –ì–∞–∑: {res.get('field5')}%"
            except:
                msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            send_telegram(msg)
        elif text == "üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É":
            requests.post(f"{URL}/sendMessage", json={
                "chat_id": chat_id,
                "text": f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{system_state['desired_temperature']}¬∞C]",
                "reply_markup": get_temp_buttons(system_state['desired_temperature'])
            })
        elif text == "üîå –í–∫–ª/–í—ã–∫–ª —Å–∏—Å—Ç–µ–º—É":
            system_state["enabled"] = not system_state["enabled"]
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if system_state["enabled"] else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
            send_telegram(f"–°–∏—Å—Ç–µ–º–∞ {status}.")
        elif text == "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã":
            system_state["forecast_day"] = 0
            forecast_text = get_forecast_text(0)
            requests.post(f"{URL}/sendMessage", json={"chat_id": chat_id, "text": forecast_text, "reply_markup": get_forecast_buttons()})
        elif text == "ü§ñ –ü—Ä–æ–≥–Ω–æ–∑ –ò–ò":
            try:
                model = joblib.load("forecast_model.pkl")
                res = requests.get("https://api.openweathermap.org/data/2.5/weather?lat=41.2995&lon=69.2401&appid=4c5eb1d04065dfbf4d0f4cf2aad6623f&units=metric").json()
                hum, cloud = res["main"]["humidity"], res["clouds"]["all"]
                pred = model.predict(np.array([[hum, cloud]]))[0]
                send_telegram(f"ü§ñ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑:\nüå° –¢–µ–º–ø: {round(pred, 1)}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {hum}%\n‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud}%")
            except:
                send_telegram("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑–∞.")

    elif "callback_query" in data:
        msg = data["callback_query"]["message"]
        message_id = msg["message_id"]
        data_val = data["callback_query"]["data"]
        chat_id = msg["chat"]["id"]

        if data_val == "temp+":
            system_state["desired_temperature"] = min(36, system_state["desired_temperature"] + 1)
            requests.post(f"{URL}/editMessageText", json={
                "chat_id": chat_id,
                "message_id": message_id,
                "text": f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{system_state['desired_temperature']}¬∞C]",
                "reply_markup": get_temp_buttons(system_state['desired_temperature'])
            })
        elif data_val == "temp-":
            system_state["desired_temperature"] = max(16, system_state["desired_temperature"] - 1)
            requests.post(f"{URL}/editMessageText", json={
                "chat_id": chat_id,
                "message_id": message_id,
                "text": f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:\n[{system_state['desired_temperature']}¬∞C]",
                "reply_markup": get_temp_buttons(system_state['desired_temperature'])
            })
        elif data_val == "temp_save":
            send_telegram(f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {system_state['desired_temperature']}¬∞C")
            return jsonify(ok=True)
        elif data_val == "forecast+":
            system_state["forecast_day"] = min(system_state["forecast_day"] + 1, 4)
            forecast_text = get_forecast_text(system_state["forecast_day"])
            requests.post(f"{URL}/editMessageText", json={
                "chat_id": chat_id,
                "message_id": message_id,
                "text": forecast_text,
                "reply_markup": get_forecast_buttons()
            })
        elif data_val == "forecast-":
            system_state["forecast_day"] = max(system_state["forecast_day"] - 1, 0)
            forecast_text = get_forecast_text(system_state["forecast_day"])
            requests.post(f"{URL}/editMessageText", json={
                "chat_id": chat_id,
                "message_id": message_id,
                "text": forecast_text,
                "reply_markup": get_forecast_buttons()
            })

    return jsonify(ok=True)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
